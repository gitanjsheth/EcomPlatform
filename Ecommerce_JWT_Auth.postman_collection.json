{
	"info": {
		"_postman_id": "jwt-auth-collection-id",
		"name": "Ecommerce JWT Authentication",
		"description": "Comprehensive JWT authentication testing for UserAuthService and ProductService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "UserAuthService",
			"item": [
				{
					"name": "1. User Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.user.username).to.eql(\"testuser\");",
									"    pm.expect(jsonData.user.email).to.eql(\"test@example.com\");",
									"    ",
									"    // Store user ID for later use",
									"    pm.environment.set(\"userId\", jsonData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"phoneNumber\": \"+1234567890\"\n}"
						},
						"url": {
							"raw": "{{userAuthBaseUrl}}/auth/signup",
							"host": [
								"{{userAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "2. User Login (Get JWT Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains JWT token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.token).to.exist;",
									"    pm.expect(jsonData.expiresAt).to.exist;",
									"    ",
									"    // Store JWT token for use in other requests",
									"    pm.environment.set(\"jwtToken\", jsonData.token);",
									"});",
									"",
									"pm.test(\"User data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.username).to.eql(\"testuser\");",
									"    pm.expect(jsonData.user.email).to.eql(\"test@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identifier\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{userAuthBaseUrl}}/auth/login",
							"host": [
								"{{userAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "3. Admin Registration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"email\": \"admin@example.com\",\n    \"password\": \"admin123\",\n    \"phoneNumber\": \"+1987654321\"\n}"
						},
						"url": {
							"raw": "{{userAuthBaseUrl}}/auth/signup",
							"host": [
								"{{userAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "4. Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Admin login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.token).to.exist;",
									"    ",
									"    // Store admin token separately if needed",
									"    pm.environment.set(\"adminToken\", jsonData.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identifier\": \"admin@example.com\",\n    \"password\": \"admin123\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{userAuthBaseUrl}}/auth/login",
							"host": [
								"{{userAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "5. Token Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.be.true;",
									"    pm.expect(jsonData.user).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{userAuthBaseUrl}}/auth/validate-token",
							"host": [
								"{{userAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"validate-token"
							]
						}
					}
				},
				{
					"name": "6. Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Login failed\", function () {",
									"    // Response should indicate failure",
									"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identifier\": \"test@example.com\",\n    \"password\": \"wrongpassword\",\n    \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{userAuthBaseUrl}}/auth/login",
							"host": [
								"{{userAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "7. Logout (Token Blacklisting)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Logout successful\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"successful\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{userAuthBaseUrl}}/auth/logout",
							"host": [
								"{{userAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					}
				}
			]
		},
		{
			"name": "ProductService",
			"item": [
				{
					"name": "8. Get All Products (Public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productBaseUrl}}/products",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products"
							]
						}
					}
				},
				{
					"name": "9. Get Single Product (Public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.exist;",
									"    pm.expect(jsonData.price).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productBaseUrl}}/products/1",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					}
				},
				{
					"name": "10. Create Product Without Auth (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"New Product\",\n    \"description\": \"New product description\",\n    \"price\": 199,\n    \"imageURL\": \"http://example.com/newimage.jpg\",\n    \"category\": {\n        \"id\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{productBaseUrl}}/products",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products"
							]
						}
					}
				},
				{
					"name": "11. Create Product With Valid Admin Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"Admin Created Product\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Admin Created Product\",\n    \"description\": \"Product created by admin\",\n    \"price\": 299,\n    \"imageURL\": \"http://example.com/admin-product.jpg\",\n    \"category\": {\n        \"id\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{productBaseUrl}}/products",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products"
							]
						}
					}
				},
				{
					"name": "12. Create Product With User Token (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"User Attempted Product\",\n    \"description\": \"This should fail\",\n    \"price\": 99,\n    \"imageURL\": \"http://example.com/fail.jpg\",\n    \"category\": {\n        \"id\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{productBaseUrl}}/products",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products"
							]
						}
					}
				}
			]
		},
		{
			"name": "Advanced Tests",
			"item": [
				{
					"name": "13. Remember Me Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Extended expiration for remember me\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.expiresAt).to.exist;",
									"    // Token should expire in 90 days for remember me",
									"    var expirationDate = new Date(jsonData.expiresAt);",
									"    var now = new Date();",
									"    var daysDiff = (expirationDate - now) / (1000 * 60 * 60 * 24);",
									"    pm.expect(daysDiff).to.be.greaterThan(80); // Allow some margin",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identifier\": \"test@example.com\",\n    \"password\": \"password123\",\n    \"rememberMe\": true\n}"
						},
						"url": {
							"raw": "{{userAuthBaseUrl}}/auth/login",
							"host": [
								"{{userAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "14. Token After Logout (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Token is revoked\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.be.false;",
									"    pm.expect(jsonData.message).to.include(\"revoked\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{userAuthBaseUrl}}/auth/validate-token",
							"host": [
								"{{userAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"validate-token"
							]
						}
					}
				}
			]
		},
		{
			"name": "ProductService Cross-Authentication",
			"item": [
				{
					"name": "1. Access Public Product List (No Auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Can access public product endpoint without authentication\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productBaseUrl}}/products",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products"
							]
						}
					}
				},
				{
					"name": "2. Try Wishlist Without Auth (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 or 403\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});",
									"",
									"pm.test(\"Access denied without authentication\", function () {",
									"    console.log(\"Correctly blocked access to protected endpoint\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{productBaseUrl}}/products/wishlist",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products",
								"wishlist"
							]
						}
					}
				},
				{
					"name": "3. Access User Wishlist (With JWT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cross-service authentication works\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.username).to.eql(\"testuser\");",
									"    pm.expect(jsonData.wishlistItems).to.exist;",
									"    pm.expect(Array.isArray(jsonData.wishlistItems)).to.be.true;",
									"});",
									"",
									"pm.test(\"JWT token validated by ProductService via UserAuthService\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"testuser\");",
									"    console.log(\"✅ Cross-service JWT validation successful!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{productBaseUrl}}/products/wishlist",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products",
								"wishlist"
							]
						}
					}
				},
				{
					"name": "4. Add Product to Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product added to wishlist successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"added to wishlist\");",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.productId).to.eql(1);",
									"    pm.expect(jsonData.timestamp).to.exist;",
									"});",
									"",
									"pm.test(\"User authentication persisted across requests\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"testuser\");",
									"    console.log(\"✅ User session maintained in ProductService!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{productBaseUrl}}/products/wishlist/1",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products",
								"wishlist",
								"1"
							]
						}
					}
				},
				{
					"name": "5. Get User Profile from ProductService",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User profile retrieved successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.username).to.eql(\"testuser\");",
									"    pm.expect(jsonData.email).to.eql(\"test@example.com\");",
									"    pm.expect(jsonData.roles).to.exist;",
									"    pm.expect(Array.isArray(jsonData.roles)).to.be.true;",
									"});",
									"",
									"pm.test(\"Access level correctly identified\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessLevel).to.eql(\"Regular User\");",
									"    console.log(\"✅ User role-based access control working!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{productBaseUrl}}/products/user/profile",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products",
								"user",
								"profile"
							]
						}
					}
				},
				{
					"name": "6. Try Admin Operation (Should Fail for User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Regular user cannot perform admin operations\", function () {",
									"    console.log(\"✅ Role-based authorization working - user blocked from admin endpoint!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Product\",\n    \"description\": \"Test Description\",\n    \"price\": 99,\n    \"imageUrl\": \"http://example.com/image.jpg\",\n    \"category\": {\n        \"name\": \"Test Category\"\n    }\n}"
						},
						"url": {
							"raw": "{{productBaseUrl}}/products",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products"
							]
						}
					}
				},
				{
					"name": "7. Remove Product from Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product removed from wishlist successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"removed from wishlist\");",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.productId).to.eql(1);",
									"});",
									"",
									"pm.test(\"Cross-service operations complete\", function () {",
									"    console.log(\"✅ Full cross-service authentication flow completed successfully!\");",
									"    console.log(\"✅ UserAuthService → ProductService JWT validation working!\");",
									"    console.log(\"✅ User-specific endpoints accessible with proper authentication!\");",
									"    console.log(\"✅ Admin endpoints properly protected!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{productBaseUrl}}/products/wishlist/1",
							"host": [
								"{{productBaseUrl}}"
							],
							"path": [
								"products",
								"wishlist",
								"1"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if needed",
					"if (pm.environment.get(\"jwtToken\") && pm.request.headers.get(\"Authorization\")) {",
					"    console.log(\"Using stored JWT token for request\");",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "userAuthBaseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "productBaseUrl",
			"value": "http://localhost:8081",
			"type": "string"
		}
	]
} 